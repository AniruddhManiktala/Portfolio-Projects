{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ensure you have referred to the installation document and installed the following for you to complete the assignment. Check the boxes\n",
    "\n",
    "- [ ] Set up the conda enviornment named `bait580_2024`. You must use that environment to complete the assignment.\n",
    "- [ ] JupyterLab, Jupyter Notebook or VSCode\n",
    "- [ ] pgadmin\n",
    "- [ ] Setup your AWS account ( basically worksheet 1)\n",
    "- [ ] Created your Postgres RDS instance (you can use the instance that you created in worksheet2)\n",
    "- [ ] Correctly updated `credentials.json` file in your notebook folder with the connection details\n",
    "\n",
    "## Mechanics\n",
    "***Must be submitted as `.ipynb`, `.html`, and any other screenshot images (Please don't upload a folder or a zipped folder).***\n",
    "\n",
    "(5 points)\n",
    "\n",
    "- [ ] Upload `.ipynb`, `.html`, and any other files asked for to canvas. (you should upload both `.ipynb` and `.html` file.)\n",
    "- [ ] Screenshots and code output rendered correctly.\n",
    "- [ ] Credentials not exposed in the notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You need to make sure that you installed all necessary packages that are needed for this assignment. Please refer to installation instructions conda on more information on necessary packages."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Case Study\n",
    "Twitter is a massive platform.  There are 300+ million users on Twitter, and it is a source of information for current events, social movements and, financial information.  It has been shown in a number of cases that information from Twitter can mobilize a large number of individuals.  From #blacklivesmatter to other forms of *hashtag* activism, social media can play an important role in informing and mobilizing individuals.\n",
    "\n",
    "This same activity can be extended to financial information.  The introduction of \"cashtags\" to twitter has allowed individuals to connect and discuss stocks, but it has also given stock promoters a method for promoting low value stocks, to \"pump and dump\".  Some researchers have analyzed the use of cashtags on Twitter.  We will use a similar method to look at the data, but we will ask a slightly different question.\n",
    "\n",
    "### Reading\n",
    "Hentschel M, Alonso O. 2014. Follow the money: A study of cashtags on Twitter. *First Monday*. URL: https://firstmonday.org/ojs/index.php/fm/article/view/5385/4109\n",
    "\n",
    "#### Supplementary Information\n",
    "\n",
    "* Evans, L., Owda, M., Crockett, K., & Vilas, A. F. (2019). A methodology for the resolution of cashtag collisions on Twitterâ€“A natural language processing & data fusion approach. *Expert Systems with Applications*, **127**, 353-369.\n",
    "* Evans, L., Owda, M., Crockett, K., & Vilas, A. F. (2021). [Credibility assessment of financial stock tweets](https://www.sciencedirect.com/science/article/pii/S0957417420310356). *Expert Systems with Applications*, **168**, 114351.\n",
    "* Cresci, S., Lillo, F., Regoli, D., Tardelli, S., & Tesconi, M. (2019). Cashtag Piggybacking: Uncovering Spam and Bot Activity in Stock Microblogs on Twitter. *ACM Transactions on the Web (TWEB)*, **13(2)**, 11.\n",
    "\n",
    "#### Raw Data source\n",
    "I document the source of ticker data below.  The tweet data we use here comes from a dataset used in Cresci *et al* (2019) referenced above.  The data is available through Zenodo using the dataset's DOI: [10.5281/zenodo.2686861](https://doi.org/10.5281/zenodo.2686861). \n",
    "\n",
    "This is for your reference. I have already created the schema, tables, normalized data and loaded it to the database.\n",
    "\n",
    "You can explore the database using pgAdmin. A great first step to understanding the database is exploring the ER diagram. You can generate it using the ERD generator tool in pgAdmin. Below is an example of how it looks, but I recommend generating it yourself to make it interactive and easier for you to explore.\n",
    "\n",
    "![ER Diagram](erdpgadmin.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Data dictionary\n",
    "\n",
    "This is information to get to know more on the twitter data that you will be working on.\n",
    "\n",
    "### Twitter CashTag Records\n",
    "\n",
    "  * Title: Cashtag Piggybacking dataset - Twitter dataset enriched with financial data.\n",
    "  * URI: https://doi.org/10.5281/zenodo.2686861\n",
    "  * Keywords: cashtag, tweets, twitter, piggybacking, social, bot\n",
    "  * Publication Date: May 9, 2019\n",
    "  * Publisher: Zenodo\n",
    "  * Creator: Cresci, Stefano; Lillo, Fabrizio; Regoli, Daniele;  Tardelli, Serena; Tesconi, Maurizio\n",
    "  * Contact Point: N/A\n",
    "  * Spatial Coverage: Global\n",
    "  * Temporal Coverage: May - September 2017\n",
    "  * Language: Multilingual\n",
    "  * Date & Time Formats: \"Thu May 18 22:00:00 +0000 2017\"\n",
    "  * Data Version: 1.0\n",
    "  * Access Date: March 2, 2021\n",
    "\n",
    "### NYSE Stock Symbol Dataset\n",
    "\n",
    "  * Title: NYSE Symbol Directory\n",
    "  * URI: ftp://ftp.nasdaqtrader.com/SymbolDirectory/otherlisted.txt\n",
    "  * Keywords: stock symbols, nyse\n",
    "  * Publication Date: May 2, 2021\n",
    "  * Publisher: nasdaqtrader.com\n",
    "  * Creator: N/A\n",
    "  * Contact Point: N/A\n",
    "  * Spatial Coverage: Global\n",
    "  * Temporal Coverage: N/A\n",
    "  * Language: English\n",
    "  * Date & Time Formats: N/A\n",
    "  * Data Version: N/A\n",
    "  * Access Date: March 2, 2021\n",
    "\n",
    "### NYSE Stock Trading Data \n",
    "\n",
    "  * Title: Yahoo! Finance Data Daily Stock Price\n",
    "  * URI: https://finance.yahoo.com/\n",
    "  * Keywords: stock symbols, nyse, stock price\n",
    "  * Publication Date: N/A\n",
    "  * Publisher: Yahoo! Finance\n",
    "  * Creator: N/A\n",
    "  * Contact Point: N/A\n",
    "  * Spatial Coverage: New York, New York, USA\n",
    "  * Temporal Coverage: May - September 2017\n",
    "  * Language: English\n",
    "  * Date & Time Formats: 2003-02-19\n",
    "  * Data Version: N/A\n",
    "  * Access Date: March 2, 2021\n",
    "  \n",
    "  ## Data Model\n",
    "\n",
    "For each stock symbol, by day, we want the count of tweets that mention the symbol, the mean stock value on that day, and the name of the stock.\n",
    "\n",
    "Yahoo! Finance data is generated only for NYSE stocks, so we will ignore other stock symbols in the dataset.\n",
    "\n",
    "### NYSE Security Names\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| symbolid | integer/serial | Unique numeric identifier | Unique integer |\n",
    "| nasdaqsymbol | text | NYSE Symbol Directory | Security abbreviation | Unique, alphanumeric, upper case, including (.-=+) |\n",
    "| securityname | text | NYSE Symbol Directory | Security name | Alphanumeric, unique   |\n",
    "\n",
    "### NYSE Stock Values\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| symbolid | int | References securities | Integer link to the securities table. | FOREIGN KEY |\n",
    "| date | date | Yahoo! Finance | Date of stock values | Valid datetime (yyyy-MM-DD) |\n",
    "| volume | numeric |  Yahoo! Finance | volume of stock traded on date | Positive integer value |\n",
    "| open | float |  Yahoo! Finance | USD value of security at trading open | Positive float value |\n",
    "| close | float |  Yahoo! Finance | USD value of security at trading close | Positive float value |\n",
    "\n",
    "### Twitter Users\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| userid | bigint | Twitter API | Unique numeric integer to identify a user | Positive integer |\n",
    "| username | text | Twitter API | Optional user name (not used currently) | Text string with valid twitter handle |\n",
    "\n",
    "### Tweets\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| tweetid | bigint | Twitter API | Unique numeric ID for tweets | Positive integer |\n",
    "| userid | bigint | Twitter API | Unique numeric ID for users | FOREIGN KEY |\n",
    "| text | text | Twitter API | Text content of a Tweet | Valid text for tweet content |\n",
    "| createddate | datetime | Twitter API | Date with timestamp | Valid Datetime between May and September 2017 |\n",
    "\n",
    "### Retweets\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| userid | bigint | Twitter API | User ID from above | FOREIGN KEY |\n",
    "| retweetid | bigint | Twitter API | Tweet ID for retweet | Integer, unique |\n",
    "| tweetid | bigint | Twitter API | Tweet ID for retweet | FOREIGN KEY |\n",
    "| createddate | datetime | Twitter API | Date with timestamp | Valid Datetime between May and September 2017 |\n",
    "\n",
    "### Replies\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| tweetid | bigint | Twitter API | Tweet ID the user is replying to | FOREIGN KEY |\n",
    "| replyid | bigint | Twitter API | Tweet ID for reply | FOREIGN KEY |\n",
    "\n",
    "### Cashtags\n",
    "\n",
    "| column | format | source | description | Validation |\n",
    "| ------ | ------ | ---------- | ------------ | ------------- |\n",
    "| tweetid | bigint | Twitter API | Tweet ID the user is replying to | FOREIGN KEY |\n",
    "| symbolid | integer | securities | Cashtag Symbol | FOREIGN KEY |\n",
    "\n",
    "\n",
    "## From Tables to Tables:\n",
    "\n",
    "```\n",
    "CREATE TABLE IF NOT EXISTS symbols (\n",
    "  symbolid serial PRIMARY KEY,\n",
    "  nasdaqsymbol varchar NOT NULL,\n",
    "  securityname text NOT NULL\n",
    "  CONSTRAINT valid_symbol CHECK (nasdaqsymbol ~* '^[A-Z\\.\\=\\-\\+\\#\\^]+$')\n",
    ");\n",
    "\n",
    "CREATE TABLE IF NOT EXISTS stockvalues (\n",
    "    symbolid int REFERENCES symbols(symbolid),\n",
    "    date date CHECK (date >= '2017-05-01' AND date < '2017-10-01'),\n",
    "    open float CHECK (open > 0),\n",
    "    close float CHECK (close > 0)\n",
    ");\n",
    "\n",
    "CREATE TABLE IF NOT EXISTS users (\n",
    "    userid bigint PRIMARY KEY,\n",
    "    username text\n",
    ");\n",
    "\n",
    "CREATE TABLE IF NOT EXISTS tweets (\n",
    "    tweetid bigint PRIMARY KEY,\n",
    "    userid bigint REFERENCES users(userid),\n",
    "    tweet text NOT NULL,\n",
    "    createddate datetime NOT NULL\n",
    ");\n",
    "\n",
    "CREATE TABLE IF NOT EXISTS retweets (\n",
    "    userid bigint REFERENCES users(userid),\n",
    "    retweetid bigint NOT NULL PRIMARY KEY,\n",
    "    tweetid bigint REFERENCES tweets(tweetid),\n",
    "    createddate datetime NOT NULL\n",
    ");\n",
    "\n",
    "CREATE TABLE IF NOT EXISTS replies (\n",
    "    tweetid bigint REFERENCES tweets(tweetid),\n",
    "    replyid bigint REFERENCES tweets(tweetid) UNIQUE PRIMARY KEY\n",
    ");\n",
    "\n",
    "CREATE TABLE IF NOT EXISTS cashtags (\n",
    "    tweetid bigint REFERENCES tweets(tweetid),\n",
    "    symbolid int REFERENCES symbols(symbolid)\n",
    ");\n",
    "```\n",
    "\n",
    "<img src=\"ERDiagram.png\">\n",
    "\n",
    "With this model, we can start to put together queries. Now it's time to get to questions in the assignment.\n",
    "\n",
    "Let's get started;\n",
    "\n",
    "## Imports and configurations\n",
    "You can use any other packages if you want to do some visualization, But please be aware that you want to install those packages using `conda` or `pip`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import psycopg2\n",
    "\n",
    "%matplotlib inline\n",
    "%load_ext sql\n",
    "%config SqlMagic.displaylimit = 20\n",
    "%config SqlMagic.autolimit = 30"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "IMPORTANT: Before running the following cell, make sure that you have the correct login information in the `credentials.json` file (it's in your assignment 1 folder):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import json\n",
    "import urllib.parse\n",
    "\n",
    "with open('/Users/vikrammaniktala/Downloads/assignment1_3/credentials.json') as f:\n",
    "    login = json.load(f)\n",
    "    \n",
    "username = login['user']\n",
    "password = urllib.parse.quote(login['password'])\n",
    "host = login['host']\n",
    "port = login['port']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "\n",
    "***1.  Identify elements of the potential dataset(s) that match each of the four Vs of Big Data: (Please edit here with your answer)***\n",
    "\n",
    "Hint: You are dealing with tweets data, stock tickers etc that you need for your analysis. For these kinds of data, how do you think 4Vs apply? Remember table given to you is a small (relatively small considering the big picture) snapshot of these data.Â \n",
    "\n",
    "rubric=reasoning:10 pts total\n",
    "\n",
    "  a.  Velocity: Users continuously tweet about stocks, market events, or sentiments, creating a constant flow of new data. Therefore, tweets would be a good example. Stock price updates (tick data) are also real-time, with prices fluctuating multiple times per second during trading hours.\n",
    "\n",
    "  b.  Veracity: Tweets may contain noise, such as irrelevant information, bot activity, or misinformation. Therefore, accuracy may be compromised. This cannot be said for stock prices, as these are directly pulled from regulatory bodies or credible APIs (Yahoo Finance, in this case).\n",
    "\n",
    "  c.  Volume: Billions of tweets are posted daily, making it a high-volume data source. Even when filtered for stock-related hashtags or cashtags, the volume remains substantial for popular tickers like $ETH, $AAPL, or $TSLA. At the same time, the cumulative stock data over multiple exchanges, trading days, and symbols also constitutes a significant dataset.\n",
    "\n",
    "  d.  Variety: Tweets are unstructured text data, often requiring preprocessing for analysis. They also include metadata, such as timestamps, language, and user details. Stock ticker data is structured in numerical formats like price, volume, and timestamps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***2. Load the dumps `tweets.sql` (it's in your assignment 1 folder). As the file size was big, I had to zip it before uploading. So make sure you unzip it before loading. You can paste the commands that you used in your pgadmin here.***\n",
    "\n",
    "rubric=correctness:5 pts total\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "postgres=> \\i /Users/vikrammaniktala/Downloads//Downloads/assignment1_3/tweets.sql"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***3. Just to test your connection, your first SQL query on your cloud database instance (RDS). Using a SQL query, return the number of rows in this table `cleantweets` in `tweets` schema.***\n",
    "\n",
    "rubric=correctness:15 pts total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the following cell (and copy it as needed) to connect to the database that you need for a question. Remember that if you're using the same database for a few questions, you don't need to reconnect each time. Only use the following cell for establishing the first connection, and for when you want to switch from one to another."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Here the postgres is the default database name that you chose while setting up RDS (check instructions). In the question above the dumps are used to load the data to this default database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "%sql postgresql://{username}:{password}@{host}:{port}/postgres"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@database-1.cjbdq6aeeode.us-east-1.rds.amazonaws.com:5432/postgres\n",
      "1 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>6937668</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(6937668,)]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT COUNT(*) \n",
    "FROM tweets.cleantweets;\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***4. Ask a question you want to answer on Twitter (the data you loaded in Question 2). Based on your question, create a mini-warehouse and proper indexing for the best performance for your query. Finally, explain the decisions you make.***\n",
    "\n",
    "Following is the breakdown of how you need to proceed.\n",
    "\n",
    "- Question identification\n",
    "- Write your reasoning on how your question can be solved? SQL query that you are planning to use.\n",
    "- Build your mini warehouse and reasoning on the decisions you make\n",
    "- Add indexing and reasoning to the decisions you make\n",
    "- Your SQL query on your mini warehouse after all indexing\n",
    "- Print/visualize your answer.\n",
    "\n",
    "rubric=interesting/correctness/reasoning/writing-quality:20 pts total\n",
    "\n",
    "The question you are asking can't be simple (but at the same time doesn't have to be too complicated). You can check the example we discussed in lecture 4, but please note it shouldn't be of the same theme. \n",
    "\n",
    "Some additional helpers to assist you in navigating this question:\n",
    "\n",
    "_1) The questions that you identify should be different from those in lecture 4. Additionally, for the question you identify, you need to come up with a different materialized view. In this materialized view, you could have a different set of joins and some other column processing (having some same columns and joins like in lecture 4 example is also fine if it is needed for the question that you are asking). You can use keywords such as `CASE WHEN`, `ROUND`, and others, similar to the example from lecture 4, and you don't need to cite it._\n",
    "\n",
    "_2) To do a final visualization or print in your answer, you might need to use the technique below to copy the output to `query_output`. After that, you can use it just like a pandas DataFrame to do whatever you like before putting it into Matplotlib (or any other visualization packages that you are comfortable with â€” for example, `altair`, `seaborn`, `plotly`, etc.)._\n",
    "\n",
    "```sql\n",
    "%%sql query_output <<\n",
    "\n",
    "SELECT * \n",
    "FROM tweets.symbols;\n",
    "```\n",
    "\n",
    "_3) Remember, the goal of a database or a data warehouse for an analyst is to bring in only what we want to your laptop memory. So doing a `SELECT *` is not an ideal thing to do in real life and won't work in most cases, as data warehouses often contain millions or billions of rows. Here, too, make sure you write an efficient query to bring in only what you need to the memory (for example, select only the columns you want and filter out any rows that you don't need for analysis)._"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Question:\n",
    "Which stock symbols have the highest average tweet activity over time?\n",
    "\n",
    "This question is interesting because it identifies stocks that are frequently discussed on Twitter, indicating public interest, market sentiment and volatility.\n",
    "\n",
    "Reasoning\n",
    "to solve this question:\n",
    "\n",
    "Extracting tweets mentioning stock symbols using the cashtags table.\n",
    "Linking each tweet to a stock symbol using the symbols table.\n",
    "Calculating the average number of tweets mentioning each stock symbol over the given time period.\n",
    "Ranking the stock symbols based on their average tweet activity.\n",
    "\n",
    "SQL Query: The query used for solving this question:\n",
    "\n",
    "Counts the tweets for each stock symbol (COUNT).\n",
    "Joins cashtags with symbols to map tweets to stock symbols.\n",
    "Aggregates tweet counts and calculates averages.\n",
    "\n",
    "Mini-Warehouse and Decisions\n",
    "Materialized View: I created a materialized view (mv_avg_tweet_activity) to pre-aggregate and store the data for efficient querying.\n",
    "\n",
    "Some of the decisions I undertook during this exercise are as follows:\n",
    "\n",
    "Subquery:\n",
    "Counts tweets for each stock symbol (symbolid) to reduce intermediate results.\n",
    "Join with symbols:\n",
    "Maps symbolid to human-readable stock symbols (nasdaqsymbol).\n",
    "Materialized View:\n",
    "Improves performance by storing aggregated results for repeated analysis.\n",
    "\n",
    "\n",
    "I also added indexes. \n",
    "\n",
    "idx_cashtags_symbolid: Optimizes joins between cashtags and symbols.\n",
    "idx_symbols_symbolid: Speeds up mapping between symbolid and nasdaqsymbol.\n",
    "idx_mv_avg_tweet_activity: Allows fast retrieval of top stock symbols by average tweet activity.\n",
    "\n",
    "The SQL query on the mini-warehouse fetches the top 10 stock symbols with the highest average tweet activity. This segment is followed by a block of code where I leverage pandas and matplotlib to convert the results of the above query into a dataframe and finally visualize it in the form of a bar chart showing the top 10 stocks by average tweet activity.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@database-1.cjbdq6aeeode.us-east-1.rds.amazonaws.com:5432/postgres\n",
      "Done.\n",
      "3623 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "DROP MATERIALIZED VIEW IF EXISTS mv_avg_tweet_activity CASCADE;\n",
    "\n",
    "CREATE MATERIALIZED VIEW mv_avg_tweet_activity AS\n",
    "SELECT \n",
    "    s.nasdaqsymbol,\n",
    "    AVG(tweet_count) AS avg_tweet_count\n",
    "FROM (\n",
    "    SELECT \n",
    "        c.symbolid,\n",
    "        COUNT(c.tweetid) AS tweet_count\n",
    "    FROM tweets.cashtags c\n",
    "    GROUP BY c.symbolid\n",
    ") subquery\n",
    "JOIN tweets.symbols s ON subquery.symbolid = s.symbolid\n",
    "GROUP BY s.nasdaqsymbol\n",
    "ORDER BY avg_tweet_count DESC;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@database-1.cjbdq6aeeode.us-east-1.rds.amazonaws.com:5432/postgres\n",
      "(psycopg2.errors.DuplicateTable) relation \"idx_cashtags_symbolid\" already exists\n",
      "\n",
      "[SQL: CREATE INDEX idx_cashtags_symbolid ON tweets.cashtags (symbolid);]\n",
      "(Background on this error at: https://sqlalche.me/e/14/f405)\n"
     ]
    }
   ],
   "source": [
    "%%sql\n",
    "CREATE INDEX idx_cashtags_symbolid ON tweets.cashtags (symbolid);\n",
    "CREATE INDEX idx_symbols_symbolid ON tweets.symbols (symbolid);\n",
    "CREATE INDEX idx_mv_avg_tweet_activity ON mv_avg_tweet_activity (nasdaqsymbol);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * postgresql://postgres:***@database-1.cjbdq6aeeode.us-east-1.rds.amazonaws.com:5432/postgres\n",
      "10 rows affected.\n",
      "Returning data to local variable query_output\n"
     ]
    }
   ],
   "source": [
    "%%sql query_output <<\n",
    "SELECT \n",
    "    nasdaqsymbol,\n",
    "    avg_tweet_count\n",
    "FROM mv_avg_tweet_activity\n",
    "ORDER BY avg_tweet_count DESC\n",
    "LIMIT 10;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Convert query output to Pandas DataFrame\n",
    "df = query_output.DataFrame()\n",
    "\n",
    "# Bar chart: Average tweet activity by stock symbol\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(df['nasdaqsymbol'], df['avg_tweet_count'], color='skyblue')\n",
    "plt.title('Top 10 Stock Symbols by Average Tweet Activity', fontsize=14)\n",
    "plt.xlabel('Stock Symbol', fontsize=12)\n",
    "plt.ylabel('Average Tweet Count', fontsize=12)\n",
    "plt.xticks(rotation=45, fontsize=10)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following is a general analysis of my findings:\n",
    "\n",
    "\n",
    "1. ETH (Ethereum) has the highest average tweet activity, significantly outpacing the others.\n",
    "Other prominent symbols include LTC (Litecoin) and TWTR (Twitter), with moderately high tweet counts.\n",
    "Symbols like SPY (S&P 500 ETF), SNAP (Snapchat), and BABA (Alibaba) fall in the mid-range.\n",
    "Symbols such as GS (Goldman Sachs), F (Ford), IBM, and V (Visa) round out the bottom of the top 10.\n",
    "\n",
    "2. Crypto Dominance: Cryptocurrencies like ETH and LTC dominate tweet activity. This likely reflects the popularity of cryptocurrencies on social media platforms, where they are heavily discussed.\n",
    "Social media tends to amplify crypto-related topics, making these symbols outliers in terms of tweet activity.\n",
    "\n",
    "Stocks like TWTR (Twitter) and SNAP (Snapchat) are expected to show high tweet activity because of their relevance to the platforms themselves.\n",
    "This could indicate public or investor interest in social media companies, where news spreads quickly and garners significant attention.\n",
    "\n",
    "Large Cap stocks like SPY, BABA, GS, and V represent large-cap, widely traded stocks. Their inclusion in the top 10 suggests that highly liquid and widely held stocks receive consistent public attention.\n",
    "\n",
    "Ford (F) and IBM appearing on the list suggest ongoing interest in legacy industries or established brands. This could be tied to news, events, or product announcements during the time period analyzed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:bait580_2024]",
   "language": "python",
   "name": "conda-env-bait580_2024-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
